#!/usr/bin/env python3

import os
import sys
import re
import time
import csv

use_color = True

DEBUG = False  # if true, save loaded nvidia-smi and top in current folder

# UID range that is considered as user accounts. process run on GPU that is not
# generated by user accounts will be ignored.
UID_RANGE = [100000000, 9999999999]


# run the command in os and get the output
def run_cmd(cmd, remove_error_msg = True):
    if remove_error_msg:
        cmd += ' 2>/dev/null'
    return os.popen(cmd)


def parse_csv_buffer_to_dict(buffer):
    import csv
    data = []
    with buffer as csvfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        for row in reader:
            data.append(row)

    if len(data) == 0:  # nvidia-smi error, return None
        return None
    title = data[0]
    data = data[1:]
    res = {}
    for i, key in enumerate(title):
        one = {}
        for j, line in enumerate(data):
            value = line[i]
            try:
                value = int(value.strip())
            except:
                pass
            one[j] = value
        res[key] = one
    return res


# parse csv buffer to a dict with pandas
def parse_csv_buffer_to_dict_with_pandas(buffer):

    import pandas as pd
    return pd.read_csv(buffer).to_dict()


def get_gpu_and_app_info():
    query_gpu_cmd = ('nvidia-smi ' 
                     '--query-gpu=uuid,temperature.gpu,memory.total,memory.used,utilization.gpu,index  ' 
                     '--format=csv')
    gpu_info_buffer = run_cmd(query_gpu_cmd)
    gpu_info_dict = parse_csv_buffer_to_dict(gpu_info_buffer)
    # print(gpu_info_dict)

    query_app_cmd = 'nvidia-smi ' \
                    '--query-compute-apps=pid,gpu_uuid,used_memory ' \
                    '--format=csv'
    app_info_buffer = run_cmd(query_app_cmd)
    app_info_dict = parse_csv_buffer_to_dict(app_info_buffer)
    # print(app_info_dict)

    if gpu_info_dict is None or app_info_dict is None:
        return {
            'gpu_info': {},
            'app_info': {}
        }

    result_dict = dict()

    # gpu info
    gpu_numbers = 0
    for key in gpu_info_dict.keys():
        gpu_numbers = len(gpu_info_dict[key])
        break

    gpu_uuid_to_index = dict()

    gpu_info_dict_index_key = dict()
    for i in range(gpu_numbers):
        gpu_info_dict_reorg = dict()
        for key in gpu_info_dict.keys():
            real_key = key.strip().split()[0]
            real_value = gpu_info_dict[key][i]
            if isinstance(real_value, str):
                real_value = real_value.strip().split()[0]
                if real_value.isnumeric():
                    real_value = int(real_value)
            gpu_info_dict_reorg[real_key] = real_value
        gpu_uuid_to_index[gpu_info_dict_reorg['uuid']] = gpu_info_dict_reorg['index']
        gpu_info_dict_index_key[gpu_info_dict_reorg['index']] = gpu_info_dict_reorg
    result_dict['gpu_info'] = gpu_info_dict_index_key

    # app info
    app_numbers = 0
    for key in app_info_dict.keys():
        app_numbers = len(app_info_dict[key])
        break

    app_info_dict_index_key = dict()
    for i in range(app_numbers):
        app_info_dict_reorg = dict()
        for key in app_info_dict.keys():
            real_key = key.strip().split()[0]
            real_value = app_info_dict[key][i]
            if isinstance(real_value, str):
                real_value = real_value.strip().split()[0]
                if real_value.isnumeric():
                    real_value = int(real_value)
            app_info_dict_reorg[real_key] = real_value
        app_info_dict_reorg['gpu_index'] = gpu_uuid_to_index[app_info_dict_reorg['gpu_uuid']]
        app_info_dict_index_key[i] = app_info_dict_reorg
    result_dict['app_info'] = app_info_dict_index_key

    return result_dict


def collect_gpu_data():
    result_dict = get_gpu_and_app_info()
    gpu_data = [None] * len(result_dict['gpu_info'])
    for idx, value in result_dict['gpu_info'].items():
        gpu_data[idx] = {
            'temp': value['temperature.gpu'],
            'mem_use': f"{value['memory.used']}MiB",
            'mem_all': f"{value['memory.total']}MiB",
            'utility': value['utilization.gpu'],
        }
    gpu_pid = [[] for x in range(len(result_dict['gpu_info']))]
    for idx, value in result_dict['app_info'].items():
        gpuid = value['gpu_index']
        pid = value['pid']
        mem = f"{value['used_gpu_memory']}MiB"
        gpu_pid[gpuid].append([pid, mem])
    return gpu_data, gpu_pid


def collect_gpu_data_old():
    smi_data = os.popen('nvidia-smi').readlines()
    if DEBUG:
        open('gpu.txt', 'w').write('\n'.join(smi_data))
    gpu_data = []
    gpu_pid = []
    if 'failed' in smi_data[0] or 'Failed' in smi_data[0]:
        print('[ERROR] NVIDIA-SMI failed to run')
        return [], []

    while '========' not in smi_data[0]:
        smi_data = smi_data[1:]
    while True:
        line1 = smi_data[1]
        line2 = smi_data[2]
        if line1.strip() == '':
            break
        gid = int(line1[1:5].strip())
        assert gid == len(gpu_data)
        temp = int(line2[6:10].strip())
        mem_use, mem_all = [x.strip() for x in line2.split('|')[2].split('/')]
        utility = int(line2.split('|')[3].split('%')[0].strip())
        gpu_data.append({
            'temp': temp,
            'mem_use': mem_use,
            'mem_all': mem_all,
            'utility': utility
        })
        gpu_pid.append([])
        smi_data = smi_data[1:]
        while '--------' not in smi_data[0]:
            smi_data = smi_data[1:]
    # TODO: SMI structure change in new version
    GPUpos = -1
    PIDpos = -1
    Mempos = -1
    while '======' not in smi_data[0]:
        if '|' in smi_data[0]:
            smi_data[0] = smi_data[0].split('|')[1]
            if 'GPU  ' in smi_data[0]:
                GPUpos = smi_data[0].index('GPU  ')
            if 'PID' in smi_data[0]:
                PIDpos = smi_data[0].index('PID') - 4
            if 'GPU Memory' in smi_data[0]:
                Mempos = smi_data[0].index('GPU Memory')
        smi_data = smi_data[1:]
    assert PIDpos >= 0 and Mempos >= 0
    for line in smi_data[1:-1]:
        if 'No running' in line:
            continue
        line = line.split('|')[1]
        gid = int(line[GPUpos:GPUpos + 3].strip())
        pid = int(line[PIDpos:PIDpos + 7].strip())
        gmem = line[Mempos:].strip()
        gpu_pid[gid].append([pid, gmem])
    return gpu_data, gpu_pid

def color(inp, com):
    makecolor = False
    if type(inp) == type(''):
        assert inp.strip()[-1] == '%' and com.strip()[-1] == '%', inp + '|' + com
        makecolor = float(inp.strip()[:-1]) > float(com.strip()[:-1])
    else:
        makecolor = inp > com
    if type(inp) == type(1.0):
        inp = '%.1f' % inp
    if makecolor and use_color:
        return "\033[7;31m%s\033[0m" % str(inp)
    return str(inp)

def bold(s):
    if use_color:
        return '\033[1m%s\033[0m' % s
    return s

def collect_cpu_data():
    top_data = os.popen('top -b -w 512 -d 1 -n 2').readlines()
    if DEBUG:
        open('cpu.txt', 'w').write('\n'.join(top_data))

    top_data = top_data[1:]
    while top_data[0][:3] != 'top':
        top_data = top_data[1:]
    top_data = top_data[2:]
    main = {}
    threads = {}
    cpu_pids = []
    main['cpu'] = (
        float(re.search(r'([0-9.]+) *us', top_data[0]).group(1))
        + float(re.search(r'([0-9.]+) *sy', top_data[0]).group(1))
    )
    memline = [x.replace('+', '0') for x in re.findall(r'[\d\.]+\+?', top_data[1])]
    main['mem_use'] = float(memline[2])
    main['mem_all'] = float(memline[0])
    main['mem_unit'] = top_data[1].split(' ')[0]
    top_data = top_data[5:]
    ps_data = os.popen('ps ax').readlines()[1:]
    ps = {}
    for line in ps_data:
        line = [x for x in line.strip().split(' ') if x != '']
        ps[int(line[0])] = ' '.join(line[4:])
    for line in top_data:
        line = [x for x in line.split(' ') if x != '']
        pid = int(line[0])
        cpu = float(line[8])
        mem = float(line[9])
        if pid in ps.keys():
            cmd = ps[pid]
        else:
            cmd = ' '.join(line[11:])
        user = line[1]
        threads[pid] = {
            'cpu': cpu,
            'mem': mem,
            'cmd': cmd,
            'user': user
        }
        if cpu > 95 or mem > 2:
            cpu_pids.append(pid)
    return main, threads, cpu_pids

UID_CACHE = {}
def is_user_uid(username):
    if username not in UID_CACHE:
        getid = os.popen(f'id -u "{username}" 2>/dev/null').read()
        try:
            UID_CACHE[username] = int(getid)
        except:
            UID_CACHE[username] = -1
    cache = UID_CACHE[username]
    return cache >= UID_RANGE[0] and cache <= UID_RANGE[1]

def list_gpu_info(gpu_data, gpu_pid, cpu_main, cpu_threads, cpu_pid,
                  column = 0, row = 999):
    try:
        column = os.get_terminal_size().columns
        row = os.get_terminal_size().lines - 1
    except:
        pass
    if column < 51:
        column = 51
    show_all = ('-a' in sys.argv) * 10000 + 1
    cputemp = []
    try:
        for line in os.popen('sensors').readlines():
            if 'Â°C' in line:
                try:
                    cputemp.append(float(line[10:19]))
                    # print(line, cputemp[-1])
                except Exception:
                    pass
        cputemp = sum(cputemp) / len(cputemp)
    except Exception:
        cputemp = 0
    print('CPU usage: %s, CPU Temprature: %s'
          % (color('%9s' % ('%.1f%%' % cpu_main['cpu']), '70%'),
             color(cputemp, 70),
    ))
    print('Memory usage: %s, All memory: %s %s'
          % (color('%6s' % ('%.1f%%' % (cpu_main['mem_use'] / cpu_main['mem_all'] * 100)), '85%'),
             cpu_main['mem_all'],
             cpu_main['mem_unit']
    ))
    row -= 3
    for i in range(len(gpu_data)):
        print('=' * column)
        gd = gpu_data[i]
        print('GPU %d, Temp:%s, Util:%s, Mem:%s, TotMem:%6s' 
              % (i, 
                 color('%3d%%' % gd['temp'], '78%').replace('%', ''), 
                 color('%3d%%' % gd['utility'], '60%'),
                 color('%4s' % ('%.0f%%' % (float(gd['mem_use'][:-3]) / float(gd['mem_all'][:-3]) * 100)), '85%'),
                 gd['mem_all'][:-2]
        ))
        row -= 2
        cleaned_pid = []
        for pid in gpu_pid[i]:
            if is_user_uid(cpu_threads[pid[0]]['user']):
                cleaned_pid.append(pid)
        if len(cleaned_pid) > 0:
            print('-' * column)
            print('%-8s%-8s%-7s%-6s%-8s%s' % ('PID', 'user', 'CPU', 'Mem', 'GPU-Mem', 'command'))
            row -= 2
        for pid, gmem in cleaned_pid:
            data = cpu_threads[pid]
            print('%-8d%-s%-7s%-6s%-8s%s'
                  % (pid,
                     bold('%-8s' % data['user']),
                     color('%-7s' % (r'%.1f%%' % data['cpu']), '100%'),
                     color('%-6s' % ('%.1f%%' % data['mem']), '10%'),
                     gmem,
                     data['cmd'][:column * show_all - 37]
            ))
            row -= 1
    # CPU and MEM 
    if row <= 1:
        return
    print('=' * column)
    print('%-8s%-8s%-7s%-6s%s' % ('PID', 'user', 'CPU', 'Mem', 'command'))
    row -= 2
    for pid in cpu_pid:
        if row == 0:
            break
        data = cpu_threads[pid]
        # if not is_user_id(data['user']):
        #    continue
        print('%-8d%-8s%s%s%s'
              % (pid,
                 bold('%-8s' % data['user']),
                 color('%-7s' % (r'%.1f%%' % data['cpu']), '100%'),
                 color('%-6s' % ('%.1f%%' % data['mem']), '10%'),
                 data['cmd'][:column * show_all - 29]
        ))
        row -= 1

if __name__ == '__main__':
    interval = 5
    single_time = False
    column = 0
    for arg in sys.argv:
        if re.match('-t\d+', arg):
            interval = int(arg[2:])
        if arg == '-1':
            single_time = True
            use_color = False
            column = 79
    try:
        if not single_time:
            os.system('clear')
            print('loading information...')
        while True:
            start_time = time.time()
            cpu_data = collect_cpu_data()
            os.system('clear')
            gpu_data = collect_gpu_data()
            # gpu_data_2 = collect_gpu_data_old()
            # print(gpu_data)
            # print(gpu_data_2)
            # exit(0)
            list_gpu_info(*gpu_data, *cpu_data, column)
            end_time = time.time()
            if single_time:
                break
            time.sleep(max(0, interval - (end_time - start_time)))
    except KeyboardInterrupt:
        pass
